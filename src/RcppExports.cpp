// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_row_quantile
NumericVector rcpp_row_quantile(NumericMatrix data, const double q);
RcppExport SEXP _biwavelet_rcpp_row_quantile(SEXP dataSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_row_quantile(data, q));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_wt_bases_dog
List rcpp_wt_bases_dog(const NumericVector k, const double scale, const int param);
RcppExport SEXP _biwavelet_rcpp_wt_bases_dog(SEXP kSEXP, SEXP scaleSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const int >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_wt_bases_dog(k, scale, param));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_wt_bases_morlet
List rcpp_wt_bases_morlet(const NumericVector k, const double scale, const int param);
RcppExport SEXP _biwavelet_rcpp_wt_bases_morlet(SEXP kSEXP, SEXP scaleSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const int >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_wt_bases_morlet(k, scale, param));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_wt_bases_paul
List rcpp_wt_bases_paul(const NumericVector k, const double scale, const int param);
RcppExport SEXP _biwavelet_rcpp_wt_bases_paul(SEXP kSEXP, SEXP scaleSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const int >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_wt_bases_paul(k, scale, param));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_biwavelet_rcpp_row_quantile", (DL_FUNC) &_biwavelet_rcpp_row_quantile, 2},
    {"_biwavelet_rcpp_wt_bases_dog", (DL_FUNC) &_biwavelet_rcpp_wt_bases_dog, 3},
    {"_biwavelet_rcpp_wt_bases_morlet", (DL_FUNC) &_biwavelet_rcpp_wt_bases_morlet, 3},
    {"_biwavelet_rcpp_wt_bases_paul", (DL_FUNC) &_biwavelet_rcpp_wt_bases_paul, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_biwavelet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
